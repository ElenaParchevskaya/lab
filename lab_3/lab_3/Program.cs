using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;  namespace lab_4 {     //1) Создать класс - однонаправленный список List.     partial class ListClass     {         //Проинициализируйте вложенный объект Owner,( Id, имя и организацию создателя).         public Owner owner;          public List<string> MyList;         //{ get; set; }  #region методы         // методы, конструкторы, индексаторы и заданные перегруженные операции.         public ListClass()         {             this.MyList = new List<string>();             this.owner = new Owner(007, "Elena Parchi", "BSUIR");         }         public string Value { get; set; }          public void Push(string element) => this.MyList.Add(element);// вставка элемента в начало списка         public int Count => this.MyList.Count;          //удаление элемента в заданной позиции         public void Remove(int pos)          {             this.MyList.RemoveAt(pos);         }         public string Pop() //удаление элемента         {             int lastElementIndex = this.MyList.Count - 1;             string lastElement = this.MyList[lastElementIndex];             this.MyList.RemoveAt(lastElementIndex); //Remove ( RemoveAt) удалет указанный эл-т List<int>  из элементы автоматич.                                                     return lastElement;         }
        #endregion 
        #region Перегрузка         //Перегрузить операции: (+) объединить два; (--) удалить элемент из начала(--list); (==) проверка на равенство; (true) - проверка, пустой ли список.

        public static List<string> operator +(ListClass list1, ListClass list2)//+ объединить два списка         {             var list = list1.MyList.Concat(list2.MyList).ToList();             return list;         }         public static ListClass operator --(ListClass list)         {             list.MyList.RemoveAt(0);             return list;         }         public static bool operator true(ListClass list)         {             return list == null;         }          public static bool operator false(ListClass list)         {             return list != null;         }         public static bool operator ==(ListClass list1, ListClass list2)         {             return list1.Equals(list2);         }         public static bool operator !=(ListClass list1, ListClass list2)         {             return !list1.Equals(list2);         }           public override bool Equals(object list)         {             if (list == null)             {                 return false;             }             if (list.GetType() != this.GetType())             {                 return false;             }             ListClass temp = (ListClass)list;             return this.Count == temp.Count && this.MyList == temp.MyList;         }         public override int GetHashCode()         {             int hash;             string wd = Convert.ToString(Count);             hash = string.IsNullOrEmpty(wd) ? 0 : Count.GetHashCode();             hash = (hash * 47) + Count.GetHashCode();             return hash;         }         public string this[int index]         {             get => this.MyList[index]; //считывает             set => this.MyList[index] = value; //устанавливает свойство         } #endregion      //2 Добавьте в свой класс вложенный объект Owner, который содержит Id, имя и организацию создателя.      public class Owner      {         public int id;         public string name;         public string organization;              //конструктор с параметрами         public Owner(int id, string name, string organization)          {             this.id = id;              this.name = name;             this.organization = organization;         }      }


        //3  Добавьте в свой класс вложенный класс Date (дата создания). Проинициализируйт (тип, определенный внутри типа - вложенным типом)
        public class Date         {             public int day;             public int month;             public int year;              public Date(int day, int month, int year)             {                 this.day = day;                 this.month = month;                 this.year = year;             }         }      }


    //4 Создайте статический класс MathOperation, содержащий 3 метода для работы с вашим классом: (max, min, количество элементов.

    static class MathOperation     {         public static string GetMaxElement(ListClass list) //MAX         {             string[] temp = new string[list.Count];             for (int i = temp.Length - 1; i >= 0; i--)             {                 temp[i] = list.Pop(); //эелементы из списка в массив             }             return temp.Max();         }          public static string GetMinElement(ListClass list) //MIN         {             string[] temp = new string[list.Count];             for (int i = temp.Length - 1; i >= 0; i--)             {                 temp[i] = list.Pop();             }             return temp.Min();         }          public static int GetCount(ListClass list) // кол-во элементов         {             return list.Count;         }          //5 Добавьте к классу MathOperation методы расширения для типа string и вашего типа         //Методы расширения: (Выделение последнего числа в строке;  Удаление заданного элемента из списка)          //поиск самого длинного слова         public static int MaxLength(this string[] str)         {             int max = str[0].Length;             int k = 0;             for (int i = 0; i < str.Length; i++)             {                 if (max <= str[i].Length)                 {                     max = str[i].Length;                     k = i;                 }             }             return k;         }          public static int LastNumber(this string[] str)         {             int max = str[0].Length;             int k = 0;             int parse = 0;             for (int i = 0; i < str.Length; i++)             {                 if (int.TryParse(str[i], out parse) == true)                 {                     max = str[i].Length;                     k = i;                 }             }             return k;         }         public static ListClass Delete(this ListClass list,int pos) //удаление элемента в заданной позиции         {             list.MyList.RemoveAt(pos);             return list;         }      }       //программа тестирования - проверка использование перегруженных операций      class Program     {         static void Main(string[] args)         {             ListClass myFirstList = new ListClass();             ListClass mySecondList = new ListClass();             List<string> myThirdList = new List<string>();              myFirstList.Push("Hy ");             myFirstList.Push("my friend ");              //mySecondList.Push("What ");             //mySecondList.Push("is ");             //mySecondList.Push("your ");             //mySecondList.Push("name?");             mySecondList.Push("Can ");             mySecondList.Push("I ");             mySecondList.Push("hepl ");             mySecondList.Push("you ?");              Console.WriteLine("Кол-во элементов в первом списке : " + myFirstList.Count);             Console.WriteLine("Список: ");             for (int i = 0; i < myFirstList.Count; i++)             {                 Console.Write(myFirstList[i]);             }             Console.WriteLine();              Console.WriteLine("Кол-во элементов во втором списке : " + mySecondList.Count);             Console.WriteLine("Список: ");             for (int i = 0; i < mySecondList.Count; i++)             {                 Console.Write(mySecondList[i]);             }             Console.WriteLine();              //тестирование перегруженных операций             //объединить два (+)             myThirdList = myFirstList + mySecondList;              Console.WriteLine("Кол-во элементов в объединенном списке : " + myThirdList.Count);             Console.WriteLine("Список: ");             for (int i = 0; i < myThirdList.Count; i++)             {                 Console.Write(myThirdList[i]);             }             Console.WriteLine();              // удалить элемент из начала(--list);              mySecondList =  --mySecondList;              Console.WriteLine("Кол-во элементов во втором списке : " + mySecondList.Count);             Console.WriteLine("Список: ");             for (int i = 0; i < mySecondList.Count; i++)             {                 Console.Write(mySecondList[i]);             }             Console.WriteLine();              //(==)проверка на равенство;             Console.WriteLine($"Проверка на равенство первого и второго списков:\nmyFirstList == mySecondList  {(myFirstList == mySecondList)} ");              //(true) - проверка, пустой ли список.             Console.WriteLine($"Проверка, пустой ли список:");             if (myFirstList == null) Console.WriteLine("True");             else Console.WriteLine("False");               Console.WriteLine("\n Массив из слов: ");             int k;                           string myString = "I'm twenty-five 25 years old, and you????" ;             string[] array = myString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);             for (int i = 0; i < array.Length; i++)             {                 Console.Write(array[i]);                 Console.Write(" ");             }              k = MathOperation.LastNumber(array);             Console.WriteLine("\n Выделение последнего числа, содержащегося в строке: " + array[k]);              Console.WriteLine("Кол-во элементов во втором списке : " + mySecondList.Count);             Console.WriteLine("Список: ");             for (int i = 0; i < mySecondList.Count; i++)             {                 Console.Write(mySecondList[i]);             }             Console.WriteLine("\n Введите число (0-2)");             int position = int.Parse(Console.ReadLine());              Console.WriteLine($"\n Удаление: ");             mySecondList = mySecondList.Delete(position);             Console.WriteLine("Кол-во элементов во втором списке : " + mySecondList.Count);             Console.WriteLine("Список: ");             for (int i = 0; i < mySecondList.Count; i++)             {                 Console.Write(mySecondList[i]);             }             Console.WriteLine();               Console.WriteLine("\n Минимальный эменент из списка myFirstList: " + MathOperation.GetMinElement(myFirstList));             Console.WriteLine("Максимальный элемент из списка mySecondList: " + MathOperation.GetMaxElement(mySecondList));              Console.WriteLine("\n Информация: ");             ListClass.Date date = new ListClass.Date(05, 05, 2019);             Console.WriteLine("Владелец: {0} {1} {2}", myFirstList.owner.id, myFirstList.owner.name, myFirstList.owner.organization);             Console.WriteLine("Дата создания: {0} {1} {2}", date.day, date.month, date.year);          }     } }  